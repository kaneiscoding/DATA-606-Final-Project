popular_df$coded = rep("no hit", nrow(popular_df)) # default
popular_df$coded[popular_df$popularity > 74] = "hit"
df$popularity_coded <- as.factor(df$coded)
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, "hit", "no hit"))
popular_df$coded = rep("no hit", nrow(popular_df)) # default
popular_df$coded[popular_df$popularity > 74] = "hit"
popular_df
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, 1, 0))
popular_df$coded = rep("no hit", nrow(popular_df)) # default
popular_df$coded[popular_df$popularity > 74] = "hit"
popular_df
unique(popular_df$popularity_coded)
print(table(popular_df$popularity_coded))
print(unique(popular_df$popularity_coded))
print(table(popular_df$popularity_coded)[1])
print(unique(popular_df$popularity_coded))
print(table(popular_df$popularity_coded))
print(unique(popular_df$popularity_coded))
idx = sampling:::strata(popular_df, stratanames = c("popularity_coded"), size=c(526964/8,2994/8), method="srswor")
idx_lr = sampling:::strata(popular_df, stratanames = c("popularity_coded"), size=c(526964/8,2994/8), method="srswor")
lr_train = popular_df[idx_lr,]
idx_lr = sampling:::strata(popular_df, stratanames = c("popularity_coded"), size=c(526964/8,2994/8), method="srswor")
lr_train = popular_df[idx_lr$ID_unit,]
lr_test = popular_df[-idx_lr$ID_unit,]
idx_lr = sampling:::strata(popular_df, stratanames = c("popularity_coded"), size=c(526964/8,2994/8), method="srswor")
lr_train = popular_df[idx_lr$ID_unit,]
lr_test = popular_df[-idx_lr$ID_unit,]
q2_fit <- glm(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, family=binomial)
idx_lr = sampling:::strata(popular_df, stratanames = c("popularity_coded"), size=c(526964/8,2994/8), method="srswor")
lr_train = popular_df[idx_lr$ID_unit,]
lr_test = popular_df[-idx_lr$ID_unit,]
q2_fit <- glm(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, family=binomial)
summary(q2_fit)
reticulate::repl_python()
# Set R Chunk options
knitr::opts_chunk$set(echo = TRUE)
# Set the number of significant digits
options(scipen=50, digits=4)
library(dplyr)
library(ggplot2)
library(sampling) # draw random samples using different sampling schemes
library(tree) # tree
library(car) # VIF
library(caret)
artists_df <- data.frame(read.csv("../spotify_dataset/artists.csv"))
tracks_df <- data.frame(read.csv("../spotify_dataset/tracks.csv"))
#head(artists_df)
# head(tracks_df)
# glimpse(artists_df)
popular_df <- tracks_df %>%
filter(popularity > 1)
#mean(tracks_df$popularity)
#mean(popular_df$popularity)
#ggplot(data=tracks_df, aes(x=popularity)) + geom_histogram()
#ggplot(data=artists_df, aes(x=popularity)) + geom_histogram()
#tracks_df <- tracks_df %>%
#              mutate(num_artists = length(as.list(strsplit(artists, ","))))
set.seed(1)
N <- nrow(popular_df)
n <- N * 0.8
idx = sample(1:N, size=n, replace = FALSE)
train = popular_df[idx,]
test = popular_df[-idx,]
popularity_tree_fit <- tree(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data=train)
summary(popularity_tree_fit)
popularity_tree_predict <- predict(popularity_tree_fit, test)
sqrt(mean((popularity_tree_predict - test$popularity)^2))
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, 1, 0))
popular_df$coded = rep("no hit", nrow(popular_df)) # default
popular_df$coded[popular_df$popularity > 74] = "hit"
idx_lr = sampling:::strata(popular_df, stratanames = c("popularity_coded"), size=c(526964/8,2994/8), method="srswor")
lr_train = popular_df[idx_lr$ID_unit,]
lr_test = popular_df[-idx_lr$ID_unit,]
lr_fit <- glm(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, family=binomial)
summary(lr_fit)
m = table(q3_results, test$diabetes) # comparing the actual vs predicted values
lr_results <- predict(lr_fit, lr_test, type="response")
m = table(lr_results, test$popularity_coded) # comparing the actual vs predicted values
lr_results <- predict(lr_fit, lr_test, type="response")
m = table(lr_results, lr_test$popularity_coded) # comparing the actual vs predicted values
(m3[1,2] + m3[2,1]) / nrow(test)
lr_results <- predict(lr_fit, lr_test, type="response")
m = table(lr_results, lr_test$popularity_coded) # comparing the actual vs predicted values
(m[1,2] + m[2,1]) / nrow(test)
# Set R Chunk options
knitr::opts_chunk$set(echo = TRUE)
# Set the number of significant digits
options(scipen=50, digits=4)
library(dplyr)
library(ggplot2)
library(tree)
library(MASS)
library(ISLR)
library(car)
library(sampling)
library(caret)
library(AppliedPredictiveModeling)
#head(artists_df)
# head(tracks_df)
# glimpse(artists_df)
popular_df <- tracks_df %>%
filter(popularity > 1)
#mean(tracks_df$popularity)
#mean(popular_df$popularity)
#ggplot(data=tracks_df, aes(x=popularity)) + geom_histogram()
#ggplot(data=artists_df, aes(x=popularity)) + geom_histogram()
#tracks_df <- tracks_df %>%
#              mutate(num_artists = length(as.list(strsplit(artists, ","))))
popular_labels <- popular_df[, c("id", "name", "artists", "id_artists", "release_date")]
popular_factors <- popular_df[, c("explicit", "key", "mode", "time_signature")]
popular_numeric <- popular_df[, c("danceability", "energy", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
popular_scaled <- scale(popular_numeric)
popular_factors <- lapply(popular_factors,factor)
popular_df2 <- data.frame(popular_labels, popular_factors, popular_scaled)
popular_df2
set.seed(1)
N <- nrow(popular_df2)
n <- N * 0.8
idx = sample(1:N, size=n, replace = FALSE)
train = popular_df2[idx,]
test = popular_df2[-idx,]
popularity_tree_fit <- tree(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data=train)
#head(artists_df)
# head(tracks_df)
# glimpse(artists_df)
popular_df <- tracks_df %>%
filter(popularity > 1)
#mean(tracks_df$popularity)
#mean(popular_df$popularity)
#ggplot(data=tracks_df, aes(x=popularity)) + geom_histogram()
#ggplot(data=artists_df, aes(x=popularity)) + geom_histogram()
#tracks_df <- tracks_df %>%
#              mutate(num_artists = length(as.list(strsplit(artists, ","))))
popular_labels <- popular_df[, c("id", "name", "artists", "id_artists", "release_date")]
popular_factors <- popular_df[, c("explicit", "key", "mode", "time_signature")]
popular_numeric <- popular_df[, c("danceability", "energy", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
popular_scaled <- scale(popular_numeric)
popular_factors <- lapply(popular_factors,factor)
popular_df2 <- data.frame(popular_labels, popular_factors, popular_scaled)
cols(popular_df2)
#head(artists_df)
# head(tracks_df)
# glimpse(artists_df)
popular_df <- tracks_df %>%
filter(popularity > 1)
#mean(tracks_df$popularity)
#mean(popular_df$popularity)
#ggplot(data=tracks_df, aes(x=popularity)) + geom_histogram()
#ggplot(data=artists_df, aes(x=popularity)) + geom_histogram()
#tracks_df <- tracks_df %>%
#              mutate(num_artists = length(as.list(strsplit(artists, ","))))
popular_labels <- popular_df[, c("id", "name", "artists", "id_artists", "release_date")]
popular_factors <- popular_df[, c("explicit", "key", "mode", "time_signature")]
popular_numeric <- popular_df[, c("danceability", "energy", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
popular_scaled <- scale(popular_numeric)
popular_factors <- lapply(popular_factors,factor)
popular_df2 <- data.frame(popular_labels, popular_factors, popular_scaled)
columns(popular_df2)
#head(artists_df)
# head(tracks_df)
# glimpse(artists_df)
popular_df <- tracks_df %>%
filter(popularity > 1)
#mean(tracks_df$popularity)
#mean(popular_df$popularity)
#ggplot(data=tracks_df, aes(x=popularity)) + geom_histogram()
#ggplot(data=artists_df, aes(x=popularity)) + geom_histogram()
#tracks_df <- tracks_df %>%
#              mutate(num_artists = length(as.list(strsplit(artists, ","))))
popular_labels <- popular_df[, c("id", "name", "artists", "id_artists", "release_date")]
popular_factors <- popular_df[, c("explicit", "key", "mode", "time_signature")]
popular_numeric <- popular_df[, c("danceability", "energy", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
popular_scaled <- scale(popular_numeric)
popular_factors <- lapply(popular_factors,factor)
popular_df2 <- data.frame(popular_labels, popular_factors, popular_scaled)
colnames(popular_df2)
#head(artists_df)
# head(tracks_df)
# glimpse(artists_df)
popular_df <- tracks_df %>%
filter(popularity > 1)
#mean(tracks_df$popularity)
#mean(popular_df$popularity)
#ggplot(data=tracks_df, aes(x=popularity)) + geom_histogram()
#ggplot(data=artists_df, aes(x=popularity)) + geom_histogram()
#tracks_df <- tracks_df %>%
#              mutate(num_artists = length(as.list(strsplit(artists, ","))))
popular_labels <- popular_df[, c("id", "name", "artists", "id_artists", "release_date")]
popular_factors <- popular_df[, c("explicit", "key", "mode", "time_signature")]
popular_numeric <- popular_df[, c("popularity", "danceability", "energy", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
popular_scaled <- scale(popular_numeric)
popular_factors <- lapply(popular_factors,factor)
popular_df2 <- data.frame(popular_labels, popular_factors, popular_scaled)
colnames(popular_df2)
set.seed(1)
N <- nrow(popular_df2)
n <- N * 0.8
idx = sample(1:N, size=n, replace = FALSE)
train = popular_df2[idx,]
test = popular_df2[-idx,]
popularity_tree_fit <- tree(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data=train)
#head(artists_df)
# head(tracks_df)
# glimpse(artists_df)
popular_df <- tracks_df %>%
filter(popularity > 1)
#mean(tracks_df$popularity)
#mean(popular_df$popularity)
#ggplot(data=tracks_df, aes(x=popularity)) + geom_histogram()
#ggplot(data=artists_df, aes(x=popularity)) + geom_histogram()
#tracks_df <- tracks_df %>%
#              mutate(num_artists = length(as.list(strsplit(artists, ","))))
popular_labels <- popular_df[, c("id", "name", "artists", "id_artists", "release_date")]
popular_factors <- popular_df[, c("explicit", "key", "mode", "time_signature")]
popular_numeric <- popular_df[, c("duration_ms","popularity", "danceability", "energy", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
popular_scaled <- scale(popular_numeric)
popular_factors <- lapply(popular_factors,factor)
popular_df2 <- data.frame(popular_labels, popular_factors, popular_scaled)
colnames(popular_df2)
set.seed(1)
N <- nrow(popular_df2)
n <- N * 0.8
idx = sample(1:N, size=n, replace = FALSE)
train = popular_df2[idx,]
test = popular_df2[-idx,]
popularity_tree_fit <- tree(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data=train)
summary(popularity_tree_fit)
popularity_tree_predict <- predict(popularity_tree_fit, test)
sqrt(mean((popularity_tree_predict - test$popularity)^2))
popular_df <- popular_df2 %>% mutate(popularity_coded = ifelse(popularity > 74, 1, 0))
#popular_df$coded = rep("no hit", nrow(popular_df)) # default
#popular_df$coded[popular_df$popularity > 74] = "hit"
idx_lr = sampling:::strata(popular_df2, stratanames = c("popularity_coded"), size=c(526964/8,2994/8), method="srswor")
popular_df2 <- popular_df2 %>% mutate(popularity_coded = ifelse(popularity > 74, 1, 0))
#popular_df$coded = rep("no hit", nrow(popular_df)) # default
#popular_df$coded[popular_df$popularity > 74] = "hit"
idx_lr = sampling:::strata(popular_df2, stratanames = c("popularity_coded"), size=c(526964/8,2994/8), method="srswor")
lr_train = popular_df2[idx_lr$ID_unit,]
lr_test = popular_df2[-idx_lr$ID_unit,]
lr_fit <- glm(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, family=binomial)
summary(lr_fit)
lr_results <- predict(lr_fit, lr_test, type="response")
m = table(lr_results, lr_test$popularity_coded) # comparing the actual vs predicted values
(m[1,2] + m[2,1]) / nrow(test)
lr_results <- predict(lr_fit, lr_test, type="response")
m = table(lr_results, lr_test$popularity_coded) # comparing the actual vs predicted values
m
print(table(popular_df2$popularity_coded)) # 0=526964 , 1=2994
print(unique(popular_df2$popularity_coded))
popular_df2 <- popular_df2 %>% mutate(popularity_coded = ifelse(popularity > 74, 1, 0))
#popular_df$coded = rep("no hit", nrow(popular_df)) # default
#popular_df$coded[popular_df$popularity > 74] = "hit"
print(table(popular_df2$popularity_coded)) # 0=526964 , 1=2994
print(unique(popular_df2$popularity_coded))
popular_df2$popularity
popular_df2$popularity.mean()
mean(popular_df2$popularity)
quantile(popular_df2, c(.75))
quantile(popular_df2$popularity, c(.75))
quantile(popular_df2$popularity, c(.75))[1]
quantile(popular_df2$popularity, c(.75))[1] + 1
popular_df2 <- popular_df2 %>% mutate(popularity_coded = ifelse(popularity > quantile(popular_df2$popularity, c(.75))[1], 1, 0))
#popular_df$coded = rep("no hit", nrow(popular_df)) # default
#popular_df$coded[popular_df$popularity > 74] = "hit"
print(table(popular_df2$popularity_coded)) # 0=526964 , 1=2994
print(unique(popular_df2$popularity_coded))
idx_lr = sampling:::strata(popular_df2, stratanames = c("popularity_coded"), size=c(400977/8,128981/8), method="srswor")
lr_train = popular_df2[idx_lr$ID_unit,]
lr_test = popular_df2[-idx_lr$ID_unit,]
lr_fit <- glm(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, family=binomial)
summary(lr_fit)
lr_results <- predict(lr_fit, lr_test, type="response")
m = table(lr_results, lr_test$popularity_coded) # comparing the actual vs predicted values
(m[1,2] + m[2,1]) / nrow(lr_test)
idx_lr = sampling:::strata(popular_df2, stratanames = c("popularity_coded"), size=c(400977/8,128981/8), method="srswor")
lr_train = popular_df2[idx_lr$ID_unit,]
lr_test = popular_df2[-idx_lr$ID_unit,]
lr_fit <- glm(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, family=binomial)
summary(lr_fit)
lr_results <- predict(lr_fit, lr_test, type="response")
m = table(lr_results, lr_test$popularity_coded) # comparing the actual vs predicted values
(m[1,2] + m[2,1]) / nrow(lr_test)
ctrl <- trainControl(method = "cv", number = 10)
#fit a regression model and use k-fold CV to evaluate performance
lr_kfold_model <- train(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, method = "lm", trControl = ctrl)
print(lr_kfold_model)
ctrl <- trainControl(method = "cv", number = 10)
#fit a regression model and use k-fold CV to evaluate performance
lr_kfold_model <- train(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, method = "glm", trControl = ctrl)
print(lr_kfold_model)
ctrl <- trainControl(method = "cv", number = 10)
#fit a regression model and use k-fold CV to evaluate performance
lr_kfold_model <- train(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, method = "glm", trControl = ctrl)
print(lr_kfold_model)
ctrl <- trainControl(method = "cv", number = 10)
#fit a regression model and use k-fold CV to evaluate performance
lr_kfold_model <- train(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, method = "glm", trControl = ctrl)
print(lr_kfold_model)
ctrl <- trainControl(method = "cv", number = 10)
#fit a regression model and use k-fold CV to evaluate performance
lr_kfold_model <- train(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, method = "glm", trControl = ctrl, family=binomial)
print(lr_kfold_model)
#fit a regression model and use k-fold CV to evaluate performance
lr_kfold_model <- train(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, method = "glm", trControl = ctrl, family="binomial")
ctrl <- trainControl(method = "cv", number = 10)
#fit a regression model and use k-fold CV to evaluate performance
lr_kfold_model <- train(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, method = "glm", trControl = ctrl, family="binomial")
print(lr_kfold_model)
popular_df2 <- popular_df2 %>% mutate(popularity_coded = ifelse(popularity >= quantile(popular_df2$popularity, c(.75))[1], 1, 0))
# Convert the outcome variable to a factor
popular_df2$popularity_coded <- as.factor(popular_df2$popularity_coded)
#popular_df$coded = rep("no hit", nrow(popular_df)) # default
#popular_df$coded[popular_df$popularity > 74] = "hit"
idx_lr = sampling:::strata(popular_df2, stratanames = c("popularity_coded"), size=c(400977/8,128981/8), method="srswor")
lr_train = popular_df2[idx_lr$ID_unit,]
lr_test = popular_df2[-idx_lr$ID_unit,]
lr_fit <- glm(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, family=binomial)
summary(lr_fit)
lr_results <- predict(lr_fit, lr_test, type="response")
m = table(lr_results, lr_test$popularity_coded) # comparing the actual vs predicted values
(m[1,2] + m[2,1]) / nrow(lr_test)
ctrl <- trainControl(method = "cv", number = 10)
#fit a regression model and use k-fold CV to evaluate performance
lr_kfold_model <- train(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, method = "glm", trControl = ctrl, family="binomial")
print(lr_kfold_model)
# Set R Chunk options
knitr::opts_chunk$set(echo = TRUE)
# Set the number of significant digits
options(scipen=50, digits=4)
library(dplyr)
library(ggplot2)
library(tree)
library(MASS)
library(ISLR)
library(car)
library(sampling)
library(caret)
library(AppliedPredictiveModeling)
artists_df <- data.frame(read.csv("../spotify_dataset/artists.csv"))
tracks_df <- data.frame(read.csv("../spotify_dataset/tracks.csv"))
popular_df <- tracks_df %>%
filter(popularity > 1)
mean(tracks_df$popularity)
mean(popular_df$popularity)
ggplot(data=tracks_df, aes(x=popularity)) + geom_histogram()
ggplot(data=artists_df, aes(x=popularity)) + geom_histogram()
tracks_df <- tracks_df %>%
mutate(num_artists = length(as.list(strsplit(artists, ","))))
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity >= quantile(popular_df$popularity, c(.75))[1], 1, 0))
popular_labels <- popular_df[, c("id", "name", "artists", "id_artists", "release_date")]
popular_factors <- popular_df[, c("explicit", "key", "mode", "time_signature", "popularity_coded")]
popular_numeric <- popular_df[, c("popularity", "duration_ms","danceability", "energy", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
popular_scaled <- scale(popular_numeric)
popular_factors <- lapply(popular_factors,factor)
popular_df2 <- data.frame(popular_labels, popular_factors, popular_scaled)
popular_df2
## VIF
model_fit<-glm(popularity~duration_ms+explicit+ danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data=popular_df2)
vif(model_fit)
# Influential Outliers
popular_df2[cooks.distance(model_fit)>1,]
popular_df2
ctrl <- trainControl(method = "cv", number = 10)
#fit a regression model and use k-fold CV to evaluate performance
model2 <- train(popularity_coded~duration_ms+explicit+ danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data=popular_df2, method = "lda", trControl = ctrl)
print(model2)
# Set R Chunk options
knitr::opts_chunk$set(echo = TRUE)
# Set the number of significant digits
options(scipen=50, digits=4)
library(dplyr)
library(ggplot2)
library(tree)
library(MASS)
library(ISLR)
library(car)
library(sampling)
library(caret)
library(AppliedPredictiveModeling)
artists_df <- data.frame(read.csv("../spotify_dataset/artists.csv"))
tracks_df <- data.frame(read.csv("../spotify_dataset/tracks.csv"))
head(artists_df)
popular_df <- tracks_df %>% filter(popularity > 1)
ggplot(data=tracks_df, aes(x=popularity)) + geom_histogram()
ggplot(data=artists_df, aes(x=popularity)) + geom_histogram()
# normalize Data
popular_labels <- popular_df[, c("id", "name", "artists", "id_artists", "release_date")]
popular_factors <- popular_df[, c("explicit", "key", "mode", "time_signature")]
popular_numeric <- popular_df[, c("duration_ms","popularity", "danceability", "energy", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
popular_scaled <- scale(popular_numeric)
popular_factors <- lapply(popular_factors,factor)
popular_df2 <- data.frame(popular_labels, popular_factors, popular_scaled)
## VIF
model_fit<-glm(popularity~duration_ms+factor(explicit)+ danceability+energy+factor(key)+loudness+factor(mode)+speechiness+acousticness+instrumentalness+liveness+valence+tempo+factor(time_signature), data=popular_df2)
vif(model_fit)
# Influential Outliers
popular_df[cooks.distance(model_fit)>1,]
# normalize Data
popular_labels <- popular_df[, c("id", "name", "artists", "id_artists", "release_date")]
popular_factors <- popular_df[, c("explicit", "key", "mode", "time_signature")]
popular_numeric <- popular_df[, c("duration_ms","popularity", "danceability", "energy", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
popular_scaled <- scale(popular_numeric)
popular_factors <- lapply(popular_factors,factor)
popular_df2 <- data.frame(popular_labels, popular_factors, popular_scaled)
ctrl <- trainControl(method = "cv", number = 10)
tree_model_class <- train(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = popular_df2, trControl = ctrl, method = "rpart")
popular_df2 <- popular_df2 %>% mutate(popularity_coded = ifelse(popularity >= quantile(popular_df2$popularity, c(.75))[1], 1, 0))
# Convert the outcome variable to a factor
popular_df2$popularity_coded <- as.factor(popular_df2$popularity_coded)
ctrl <- trainControl(method = "cv", number = 10)
tree_model_class <- train(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = popular_df2, trControl = ctrl, method = "rpart")
print(tree_model_class)
# Set R Chunk options
knitr::opts_chunk$set(echo = TRUE)
# Set the number of significant digits
options(scipen=50, digits=4)
library(dplyr)
library(ggplot2)
library(tree)
library(MASS)
library(ISLR)
library(car)
library(sampling)
library(caret)
library(AppliedPredictiveModeling)
artists_df <- data.frame(read.csv("../spotify_dataset/artists.csv"))
tracks_df <- data.frame(read.csv("../spotify_dataset/tracks.csv"))
#head(artists_df)
# head(tracks_df)
# glimpse(artists_df)
popular_df <- tracks_df %>%
filter(popularity > 1)
#mean(tracks_df$popularity)
#mean(popular_df$popularity)
#ggplot(data=tracks_df, aes(x=popularity)) + geom_histogram()
#ggplot(data=artists_df, aes(x=popularity)) + geom_histogram()
#tracks_df <- tracks_df %>%
#              mutate(num_artists = length(as.list(strsplit(artists, ","))))
popular_labels <- popular_df[, c("id", "name", "artists", "id_artists", "release_date")]
popular_factors <- popular_df[, c("explicit", "key", "mode", "time_signature")]
popular_numeric <- popular_df[, c("duration_ms","popularity", "danceability", "energy", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
popular_scaled <- scale(popular_numeric)
popular_factors <- lapply(popular_factors,factor)
popular_df2 <- data.frame(popular_labels, popular_factors, popular_scaled)
colnames(popular_df2)
set.seed(1)
N <- nrow(popular_df2)
n <- N * 0.8
idx = sample(1:N, size=n, replace = FALSE)
train = popular_df2[idx,]
test = popular_df2[-idx,]
popularity_tree_fit <- tree(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data=train)
summary(popularity_tree_fit)
popularity_tree_predict <- predict(popularity_tree_fit, test)
sqrt(mean((popularity_tree_predict - test$popularity)^2))
plot(popularity_tree_fit)
text(popularity_tree_fit ,pretty =0)
cv.popularity=cv.tree(popularity_tree_fit)
plot(popularity_tree_fit$popularity, cv.popularity$dev,type='b')
cv.popularity=cv.tree(popularity_tree_fit, K=10)
plot(popularity_tree_fit$popularity, cv.popularity$dev,type='b')
cv.popularity=cv.tree(popularity_tree_fit, K=10)
plot(cv.popularity$popularity, cv.popularity$dev,type='b')
cv.popularity=cv.tree(popularity_tree_fit, K=10)
#plot(cv.popularity$popularity, cv.popularity$dev,type='b')
plot(cv.popularity$popularity, cv.popularity$dev,type='b')
plot(cv.popularity$size, cv.popularity$dev,type='b')
# Set R Chunk options
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=6, fig.height=4)
# Set the number of significant digits
options(scipen=50, digits=4)
library(dplyr)
library(ggplot2)
library(tree)
library(MASS)
library(ISLR)
library(car)
library(sampling)
library(caret)
library(AppliedPredictiveModeling)
library(gridExtra)
library(ggcorrplot)
library(QuantPsyc)
library(stringr)
artists_df <- data.frame(read.csv("../spotify_dataset/artists.csv"))
tracks_df <- data.frame(read.csv("../spotify_dataset/tracks.csv"))
# head(artists_df) somthing here has characters that latex cant print
# head(tracks_df)
tracks_pop <- ggplot(data=tracks_df, aes(x=popularity), title="Full Tracks Dataset Popularity Histogram") + geom_histogram()
artists_pop <- ggplot(data=artists_df, aes(x=popularity), title="Full Artists Dataset Popularity Histogram") + geom_histogram()
tracks_pop
artists_pop
# Filter out tracks with popularity less than 1
popular_df <- tracks_df %>% filter(popularity > 1)
# normalize Data
popular_labels <- popular_df[, c("id", "name", "artists", "id_artists", "release_date")]
popular_factors <- popular_df[, c("explicit", "key", "mode", "time_signature")]
popular_numeric <- popular_df[, c("duration_ms","popularity", "danceability", "energy", "loudness", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo")]
popular_scaled <- scale(popular_numeric)
popular_factors <- lapply(popular_factors,factor)
popular_df2 <- data.frame(popular_labels, popular_factors, popular_scaled)
tree_model_reg <- train(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = popular_df2, trControl = ctrl, method = "rpart")
popular_df2 <- popular_df2 %>% mutate(popularity_coded = ifelse(popularity >= quantile(popular_df2$popularity, c(.75))[1], 1, 0))
# Convert the outcome variable to a factor
popular_df2$popularity_coded <- as.factor(popular_df2$popularity_coded)
# control object for k-fold cross validation
ctrl <- trainControl(method = "cv", number = 10)
tree_model_reg <- train(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = popular_df2, trControl = ctrl, method = "rpart")
print(tree_model_reg)
plot(tree_model_reg)
text(tree_model_reg ,pretty =0)
