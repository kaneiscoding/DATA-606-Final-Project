# Set R Chunk options
knitr::opts_chunk$set(echo = TRUE)
# Set the number of significant digits
options(scipen=50, digits=4)
library(dplyr)
library(ggplot2)
libr
# Set R Chunk options
knitr::opts_chunk$set(echo = TRUE)
# Set the number of significant digits
options(scipen=50, digits=4)
library(dplyr)
library(ggplot2)
libr
# Set R Chunk options
knitr::opts_chunk$set(echo = TRUE)
# Set the number of significant digits
options(scipen=50, digits=4)
library(dplyr)
library(ggplot2)
artists_df <- data.frame(read.csv("../spotify_dataset/artists.csv"))
tracks_df <- data.frame(read.csv("../spotify_dataset/tracks.csv"))
head(artists_df)
# head(tracks_df)
# glimpse(artists_df)
popular_df <- tracks_df %>%
filter(popularity > 1)
#mean(tracks_df$popularity)
#mean(popular_df$popularity)
#ggplot(data=tracks_df, aes(x=popularity)) + geom_histogram()
#ggplot(data=artists_df, aes(x=popularity)) + geom_histogram()
#tracks_df <- tracks_df %>%
#              mutate(num_artists = length(as.list(strsplit(artists, ","))))
#head(artists_df)
# head(tracks_df)
# glimpse(artists_df)
popular_df <- tracks_df %>%
filter(popularity > 1)
#mean(tracks_df$popularity)
#mean(popular_df$popularity)
#ggplot(data=tracks_df, aes(x=popularity)) + geom_histogram()
#ggplot(data=artists_df, aes(x=popularity)) + geom_histogram()
#tracks_df <- tracks_df %>%
#              mutate(num_artists = length(as.list(strsplit(artists, ","))))
set.seed(1)
N <- nrow(popular_df)
n <- N * 0.8
n
set.seed(1)
N <- nrow(popular_df)
n <- N * 0.8
idx = sample(1:N, size=n, replace = FALSE)
popular_sample = df[idx,]
set.seed(1)
N <- nrow(popular_df)
n <- N * 0.8
idx = sample(1:N, size=n, replace = FALSE)
popular_sample = popular_df[idx,]
set.seed(1)
N <- nrow(popular_df)
n <- N * 0.8
idx = sample(1:N, size=n, replace = FALSE)
train = popular_df[idx,]
test = popular_df[-idx,]
popularity_tree_fit <- tree(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data=train)
# Set R Chunk options
knitr::opts_chunk$set(echo = TRUE)
# Set the number of significant digits
options(scipen=50, digits=4)
library(dplyr)
library(ggplot2)
library(sampling) # draw random samples using different sampling schemes
library(tree) # tree
popularity_tree_fit <- tree(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data=train)
summary(popularity_tree_fit)
# Set R Chunk options
knitr::opts_chunk$set(echo = TRUE)
# Set the number of significant digits
options(scipen=50, digits=4)
library(dplyr)
library(ggplot2)
library(sampling) # draw random samples using different sampling schemes
library(tree) # tree
library(car) # VIF
car::vif(popularity_tree_fit)
cols = duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature
popularity_tree_fit <- tree(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data=train)
summary(popularity_tree_fit)
tree_predict <- predict(popularity_tree_fit, test)
sqrt(mean((popularity_tree_fit - test$popularity)^2))
popularity_tree_predict <- predict(popularity_tree_fit, test)
sqrt(mean((popularity_tree_predict - test$popularity)^2))
# Set R Chunk options
knitr::opts_chunk$set(echo = TRUE)
# Set the number of significant digits
options(scipen=50, digits=4)
library(dplyr)
library(ggplot2)
library(sampling) # draw random samples using different sampling schemes
library(tree) # tree
library(car) # VIF
library(caret)
tree_model <- train(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = popular_df, trControl = ctrl, method = "rpart")
ctrl <- trainControl(method = "cv", number = 10)
tree_model <- train(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = popular_df, trControl = ctrl, method = "rpart")
print(tree_model)
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, 1, 0))
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, 1, 0))
table(popular_df$popularity_coded)
unique(popular_df$popularity_coded)
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, "hit", "no hit"))
table(popular_df$popularity_coded)
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, "hit", "no hit"))
table(popular_df$popularity_coded)
contrasts(popular_df$popularity_coded)
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, 1, 0))
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, "hit", "no hit"))
df$popularity_coded <- as.factor(df$popularity_coded)
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, "hit", "no hit"))
popular_df
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, "hit", "no hit"))
df$popularity_coded <- as.factor(df$popularity_coded)
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, "hit", "no hit"))
popular_df$coded = rep("no hit", nrow(popular_df)) # default
popular_df$coded[popularity > 74] = "hit"
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, "hit", "no hit"))
popular_df$coded = rep("no hit", nrow(popular_df)) # default
popular_df$coded[popularity > 74] = "hit"
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, "hit", "no hit"))
popular_df$coded = rep("no hit", nrow(popular_df)) # default
popular_df$coded[popular_df$popularity > 74] = "hit"
df$popularity_coded <- as.factor(df$popularity_coded)
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, "hit", "no hit"))
popular_df$coded = rep("no hit", nrow(popular_df)) # default
popular_df$coded[popular_df$popularity > 74] = "hit"
df$popularity_coded <- as.factor(df$coded)
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, "hit", "no hit"))
popular_df$coded = rep("no hit", nrow(popular_df)) # default
popular_df$coded[popular_df$popularity > 74] = "hit"
popular_df
popular_df <- popular_df %>% mutate(popularity_coded = ifelse(popularity > 74, 1, 0))
popular_df$coded = rep("no hit", nrow(popular_df)) # default
popular_df$coded[popular_df$popularity > 74] = "hit"
popular_df
unique(popular_df$popularity_coded)
print(table(popular_df$popularity_coded))
print(unique(popular_df$popularity_coded))
print(table(popular_df$popularity_coded)[1])
print(unique(popular_df$popularity_coded))
print(table(popular_df$popularity_coded))
print(unique(popular_df$popularity_coded))
idx = sampling:::strata(popular_df, stratanames = c("popularity_coded"), size=c(526964/8,2994/8), method="srswor")
idx_lr = sampling:::strata(popular_df, stratanames = c("popularity_coded"), size=c(526964/8,2994/8), method="srswor")
lr_train = popular_df[idx_lr,]
idx_lr = sampling:::strata(popular_df, stratanames = c("popularity_coded"), size=c(526964/8,2994/8), method="srswor")
lr_train = popular_df[idx_lr$ID_unit,]
lr_test = popular_df[-idx_lr$ID_unit,]
idx_lr = sampling:::strata(popular_df, stratanames = c("popularity_coded"), size=c(526964/8,2994/8), method="srswor")
lr_train = popular_df[idx_lr$ID_unit,]
lr_test = popular_df[-idx_lr$ID_unit,]
q2_fit <- glm(popularity ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, family=binomial)
idx_lr = sampling:::strata(popular_df, stratanames = c("popularity_coded"), size=c(526964/8,2994/8), method="srswor")
lr_train = popular_df[idx_lr$ID_unit,]
lr_test = popular_df[-idx_lr$ID_unit,]
q2_fit <- glm(popularity_coded ~ duration_ms+explicit+danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+liveness+valence+tempo+time_signature, data = lr_train, family=binomial)
summary(q2_fit)
reticulate::repl_python()
